name: Deploy Terraform K8S Azure

on:
  push:
    paths:
    - 'terraform-azure/**'
    - '.github/workflows/start_terraform.yml'
    branches:
    - main

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  KUBECONFIG: ${{ github.workspace }}/terraform-azure/kubeconfig

jobs:
  terraform-CI:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform-azure

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Storage
      env:
        SCRIPT_DIR: ${{ github.workspace }}/terraform-azure/scripts
      run: bash  $SCRIPT_DIR/create_storage.sh

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -lock=false

    - name: terraform apply
      if: "!contains(github.event.head_commit.message, 'destroy')"
      run: terraform apply -auto-approve -lock=false

    - name: Upload kubeconfig artifact
      uses: actions/upload-artifact@v3
      with:
        name: kubeconfig
        path: terraform-azure/kubeconfig

    - name: Terraform Destroy
      if: contains(github.event.head_commit.message, 'destroy')
      run: terraform destroy -auto-approve

  terraform-CD:
      needs: terraform-CI
      if: "!contains(github.event.head_commit.message, 'destroy')"
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: terraform-azure

      steps:
      - name: Clon Rep
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: terraform-azure
    
      - name: Apply Kubernetes manifest
        run: kubectl apply -f init.yml
    
      - name: Wait for 15 seconds()
        run: sleep 20s

      - name: Check Service
        run: kubectl get service
